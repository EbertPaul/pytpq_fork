# -*- coding: utf-8 -*-
"""
Functions to get statistics over random samples

:author: Alexander Wietek
"""
import numpy as np
import scipy as sp
import scipy.stats
from collections import OrderedDict

def data_dict_to_npdata(data):
    """ convert a dictionary of arrays to a 2d numpy array """
    return np.array([value for key,value in list(data.items())])



def jackknife(data):
    """ Resample to Jackknife averages """
    npdata = data_dict_to_npdata(data)
    data_resampled = OrderedDict()
    for idx, (seed, array) in enumerate(list(data.items())):
        data_resampled[seed] = \
            np.mean(np.delete(npdata, idx, axis=0), axis=0)
    return data_resampled


def mean(data):
    """ Compute the mean of a data dict of different seeds
    
    Args:
         data :   dict of data for every seed
    Returns:
         np.array: array of means of given data
    """
    npdata = data_dict_to_npdata(data)
    return np.mean(npdata, axis=0)

def error(data):
    """ Compute the error of mean of a data dict of different seeds
    
    Args:
         data :   dict of data for every seed
    Returns:
         np.array: array of error of given data
    """
    npdata = data_dict_to_npdata(data)
    return sp.stats.sem(npdata, axis=0)

def error_jackknife(data):
    """ Compute the error of mean of a data dict of different seeds
    
    Args:
         data :   dict of data for every seed
    Returns:
         np.array: array of error of given data
    """
    npdata = data_dict_to_npdata(data)
    return np.sqrt(npdata.shape[0]) * sp.stats.sem(npdata, axis=0)
